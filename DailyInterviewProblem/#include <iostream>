#include <iostream>
using namespace std;

class LRUCache{
	public:
	class Node{
		int key;
		int value;
		Node *prev;
		Node *next;
		Node(int _key , int _value){
			key = _key;
			value = _value;
		}
	};
	
	Node *head = new Node(-1,-1);
	Node *tail = new Node(-1,-1);
	
	int capacity;
	unordered_map<int,Node *> cache;
	
	LRUCache (int _capacity){
		capacity = _capacity;
		head->next = tail;
		tail->prev = head;
	}
	
	void addNode(Node *node){
		Node *temp = head->next;
		node->next = temp;
		node->prev = head;
		head->next = node;
		temp->prev = node;
	}
	void delNode(Node *node){
		Node *delPrev = node->prev;
		Node *delNext = node->next;
		delPrev->next = delNext;
		delNext->prev = delPrev;
	}
	
	int get(int key){
		//things to be changed
		//first check if it is present in hashMap
		//if not present return -1
		//else return the value , and delete node in hashmap as well as in doubly linked list
		
		if(cache.find(key)!=cache.end()){
			Node *resultNode = cache[key];
			cache.erase(key);
			deleteNode(resultNode);
			addNode(resultNode);
			cache[key] = head->next;
			return resultNode->val;
			
		}return -1;
		
	}
	
	void put(int key , int value){
		//thinks need to take care while putting things
		//if key is already present ->then make last recently used
		if(cache.find(key)!=cache.end()){
			Node *currNode = cache[key];
			cache.erase(key);
			deleteNode(currNode);
			
		}
		//if we reach max capacity 
		if(capacity == cache.size()){
			cache.erase(tail->prev->key);
			deleteNode(tail->prev);
		}
		
		
		addNode(currNode);
		cache[key] = head->next;
		
		
	}
};

int main() {
	// your code goes here
	return 0;
}